- do we enforce no-args-to-LHS-pattern anywhere? try

	[a,b] a b = 12;

- use destroy_if_destroyed() in more places? 

	grep destroy_ *.h

- use compile->last_sym to spot chains of defs

  multiple definitions of the same function are allowed, provided they all
  have the same number of arguments, and provided only one of them has no
  argument pattern matching

  example:

  	fred [a, b, 1] = a * b;
	fred (Image x) = rot90 x;
	fred z = error "what";

  any of these can have locals, those locals just apply to that one
  definition

  this compiles to:

	fred $$a4 
		= $$fred1, is_list $$a4 && len $$a4 == 2 && $$a4?2 == 1
		= $$fred2, is_instance_of "Image" $$a4
		= $$fred3
	{
		$$fred1 
			= a * b
		{
			a = $$a4?0;
			b = $$a4?1;
		}
		$$fred2 
			= rot90 x
		{
			x = $$a4;
		}
		$$fred3 
			= error "what";
		{
			z = $$a4;
		}
	}

  so each pattern-matching definition generates a condition and an action

  constants in patterns become part of the condition test

  the action goes into a private function, the conditions are joined together
  in the function wrapper

  the no-pattern case (if present) becomes the action for the "otherwise"
  clause in the wrapper

  if not present, we generate (error "pattern match failed") or somesuch for 
  the default case

  we will need to regenerate the wrapper function every time a definition of
  fred is added or removed ... can we do this easily?

  when are two definitions considered equal? should we warn about this? "fred
  x" could occur in two files, for example

  process:
 
	* we see a "fred arg-list" incoming
	* does the arg list contain any patterns?
	  yes:
		* do we already have a fred in this scope?
		  yes: 	
			* the existing fred must be the wrapper, this must be 
			  a new possible RHS
			* check that the number of args matches
		  no:
		  	* generate a fred to act as the wrapper
			* add args called $$arg1 etc. to the main fred
		* add this new fred as a $$fredn local to the current
		  fred
		* expand the patterns as local references to the main
		  fred's arguments
		* parse the rest of the def in that context
		* keep the pattern list around, we'll need it to generate the
		  ifs for the wrapper later
	  no:
	  	* do we have a fred in this scope?
		  yes:
		  	* check the previous fred was a pattern matcher
		  	* check the number of args matches
		  	* check there isn't already a default case
			* add as above
		  no:
		  	* add as a regular non-pattern definition

  issues:

  	* where do we store the pattern lists? we can't expand them at
	  parse-time, since we need them to make the wrapper (which we can't
	  make until we've seen all the candidate RHS)
	* when one of the RHS is changed, we need to regenerate the wrapper,
	  how do we do this? (could nuke the generated code in the compile
	  when we see a new RHS, then rebuild the wrapper in compile on the
	  next heap_copy?)
	* our current condition generator won't work ... we need to test
	  consts as well, and it'll be rather inefficient as we'll repeatedly
	  test the trunk as we loop over the leaves --- instead, walk the 
	  pattern recursively top-down testing each node

  process:

  * see "fred" (as opposed to simple_pattern)
  	* is there already a fred in scope? 
	  yes:
	  	* was current_compile->last_sym also a "fred"?
		  yes:
			* another definition
	  yes:
	  	* this must be an alternative definition


- we put the 2nd fred in as a local of the first, but then the 2nd can see all
  the stuff the first has as locals

	  z = 42;
	  fred 1 = 12 { z = 99; }
	  fred 2 = z;

  "fred 2" will return 99 :(


  we need to make "fred 2 = z" into another fred at the same level, eg

  	$$alternate42$fred 2 = z;

- try:




  Nope, then how do we link the freds together for remove etc.?

  Better:

  	see a new sym (fred), create it

	parse args with simple names becoming params, patterns becoming
	$$arg42 plus a local $$patt42 holding the pattern source

	expand the pattern to an access def as well, so our children can bind
	to it

	at the = sign, test for any pattern args present .. if there are none,
	carry on as before

	otherwise, make a new local called $$alternate42 or whatever and parse
	the RHS into that

	at the end of parse, need to resolve outwards twice, since we nest in
	twice

	now if we see another fred, check that the number of args matches and
	then parse in as $$alternate99

  what abut

  	fred 2 a = 12;
	fred 1 b = 32;

  the first fred will make a top-level with

  	fred $$arg12 a
		=
	{
		$$alernate42 = 12;
		$$patt12 = 2;
	}

  then when we parse the 2nd fred the name of the 2nd param is wrong :(


  Even betterer:

  	use GLR to split off the four cases for us

		ident = 
		pattern = 
		ident ident_list = 
		ident pattern_list =

	change pattern syntax so that ident is not part of simple_pattern

	need to change lcomp as well

	so we need to check why PARSE_PARAMS gets used: can we do without the
	params part? yes, it's used so we can edit functions, but we no longer
	do this

	these days all we need is expr I think, but we'd need a small action
	wrapper around it to wipe out any existing tree and locals



        Find_item = class
            Menuaction "_Find"
                ("find a transform which will map sample image onto " ++
                "reference") {
            action reference sample = class
                Transform b reference.width reference.height {
                _vislevel = 3;

                // controls
                order = rubber_order;
                interp = rubber_interp;
                wrap = rubber_wrap;
                max_err = Expression "Maximum error" 0.3;
                max_iter = Expression "Maximum iterations" 10;

                // transform
                [a,b,c] = transform_search max_err max_iter order interp wrap
                        sample reference;

                transformed_image = Image a;
                final_error = c;
            }
        }

  fails with 

	Bad superclass.

	Superclass constructor 
	"Image_transform_item.Image_rubber_item.Transform"
	should have no secret arguments.

  but this:

        Find_item = class
            Menuaction "_Find"
                ("find a transform which will map sample image onto " ++
                "reference") {
            action reference sample = class
                _t {
                _vislevel = 3;

                // controls
                order = rubber_order;
                interp = rubber_interp;
                wrap = rubber_wrap;
                max_err = Expression "Maximum error" 0.3;
                max_iter = Expression "Maximum iterations" 10;

                // transform
                [a,b,c] = transform_search max_err max_iter order interp wrap
                        sample reference;

                transformed_image = Image a;
		_t = Transform b reference.width reference.height;
                final_error = c;
            }
        }

  (ie. make the superclass constructor into a member) works fine

- after pressing "Process" in the edit window, we always select last_sym,
  which is often not what we want

  make it jump less after a process ... eg. try editing something in the
  middle of Image/Transform, very annoying



- try using bison's location system

	http://www.gnu.org/software/bison/manual/html_mono/bison.html#Locations

- add something to Symbol:

	Symbol *access_for;

  links generated access def to the $$thing4 which holds the RHS

  handy for the program window, also maybe for lcomp code gen?

  also for row edits

- Filter / Blend items have extra blends in the name

- image blend should have an invert mask option?

- don't offer to clear temps if there's been a crash 

  need to be able to test for process-still-running by PID

  try

  	http://msdn2.microsoft.com/en-us/library/ms886766.aspx

	gboolean
	process_running( int pid )
	{
		HANDLE handle;

		if( (handle = OpenProcess( 0, FALSE, pid )) ) {
			CloseHandle( handle );
			return( TRUE );
		}

		return( FALSE );
	}

- autoarrange after every column resize or move

  animate movement, so columns slither out of the way and in to place when 
  you drop

  duplicate column placement would be odd: maybe place duplicate below? also
  new column? what about dropping an image on to the ws background?

- have a toggle in find colour calib for "linearise"

  another option that uses the greyscale to set the zero, but does not adjust
  gamma?

  need to break linear regression out into a separate function ... se Math.def

  half-done colour calib thing

- apply calib should work for groups

- quit while a thumbnail is painting: IMAGEs are leaked? seems esp. bad with
  greyc, perhaps just because it's so slow

- there's some left-recursion in the parser, eg. comma_list, is this easily
  fixable?

- add (*) (operator sections) ... need a binup / uop production? can't
  do this without losing precedence stuff, it'll need a separate production
  for sections

- which gtk are we using for the windows build? new gtks come from the main gtk
  site now, rather than tor's homepage:

	http://ftp.gnome.org/pub/GNOME/binaries/win32/

  should be all zips, so we could automate?

- magic definition maker could make a workspace-local def, rather cool

- do we leak for IMAGEVEC/DOUBLEVEC/etc. in vips_call.c? I think we might

- test classmodel_dict_new() ... part of classmodel member automation

  need to implement member edit for OPTION groups

	classmodel_done_member() ... read widget set -> model
	classmodel_buildedit_member( ... model -> build widget set 

  part of the [["key",value]] arg type

WONTFIX
=======

- can we get VIPS errors reported in Error too?

  we'd need to add logging to vips I think

- toolkits / find doesn't find builtins on their name ... eg. search for
  "im_add"

  too hard to fix with the way searching is done now

- turn on update regions during drag, fix the x pos, try dragging, horrible
  flickering as we update twice, once after the drag motion and once after the
  recomp

  if you comment out the explicit vobject_refresh() in 
  regionview_model_update() the flickering goes, but region dragging is then
  very unresponsive

  fix this when we get fast recomp back again

- have a test_types.ws ... test arithmetic on all combinations of _types?

- panner would be cool

- tooltips on Expression rows always show unedited formula

  could special-case formula for things with expression RHS?

- what about iimage, iregion, iarrow ... can we member automate these? why are
  they different?

- can't see error indications in noedit mode

  should set a red background for display area as well as for rowview button?

- need to be able to override cons to be able to make a List class :-(

  see reduce.c:1710

  this will change the strictness of cons ... how much breakage will this
  cause? very unclear

  try this as a quick hack

  need to do this before we can finish List

  need List to make gamma easy

- unselected column headers are too like the bg colour on windows?

- python uses z.real and z.imag to extract real/image, should we add this too?

  we don't really have complex as a true class, so it would be rather odd

  need to add "[a].head" etc as well

- python blocks complex->real with casts ... insists you use .imag/.real or
  abs()

- if nip sees a IM_RW_IMAGE argument, it could automatically do this:

	int
	im_flood_blob_copy( IMAGE *in, IMAGE *out, int x, int y, PEL *ink )
	{
		IMAGE *t;

		if( !(t = im_open_local( out, "im_flood_blob_copy", "t" )) ||
			im_copy( in, t ) ||
			im_flood_blob( t, x, y, ink, NULL ) ||
			im_copy( t, out ) ) 
			return( -1 );

		return( 0 );
	}

  so it would turn a single IM_RW_IMAGE arg into a paired input and output
  arg

  could make im_lineset() into a regular inplace func and rely on nip to wrap
  and unwrap

  junk flood_blob_copy

  nip could do this lazilly ... if we see the user doing

     im_line (im_line ...) ...

  then we could make one memory image and call im_line twice on it
  destructively ... cool! we'd need to check refcounts to make sure the
  intermediate wasn't being used anywhere else

  hmm! might actually be very hard, we don't have true refcounts for things in
  the heap

  need to do it on read instead: 

    - for image i

    - use as an IM_RW_IMAGE arg ... copy to a memory area and pass in memory
      handle

    - return memory area IMAGE j, and set a flag saying "can operate on
      destructively"

    - if we use j as an IM_RW_IMAGE arg, skip the copy and just pass memory
      area in destructively ... we now have two ImageInfo sharing a single
      IMAGE

    - !!!!

    - does ImageInfo allow IMAGE sharing? not sure it does

    - maybe this needs to be a vips8 feature when we'll have refcounts on
      IMAGE

- tooltip on column says which other columns items in this column refer to,
  and which columns refer to items in this column

- how about a nip start folder common to all versions

  so nip2-7.11.14 tries

    .nip2-7.11.14/start
    .nip2-7.11/start
    .nip2-7/start
    .nip2/start

  or maybe

    .nip2/7.11.14/start
    .nip2/7.11/start
    .nip2/7/start
    .nip2/start

  bit less cluttered

  also, we could have

    .nip2/tmp

  and not have multiple nip2 tmp areas

  workspace recover after crash could break though ... maybe keep ws saves in
  .nip2/7.11.4/tmp?

- think again about class arg checks 

  is there some way we can avoid the _check overhead? or at least check less 
  often

- plotpresent/imagepresent could have a common base class with the focus stuff
  in? also kb nav, zoom, drag-scroll

  a bit difficult, because we want two different policies on window resize:
  plot should change the object to match the window

- photographic negative should also be in image/levels ?

  no, it does ->sRGB, (255-) etc., so it's better as a filter

- gtk+ 2.12 has a treeview widget with rectangular select and grid lines

  use instead of gtksheet?

- stop image flickering on clock recomp?

  want background pattern to be a property of the image display widget, not
  the image?

  so we fade in tiles when that section of the image has never been displayed
  before (eg. on scroll or zoom)

  we don't fade when that section has been painted and we are just changing
  the image (eg. on recalc)

  if fadesteps == 1, only paint the sections of the tile for which mask == 255

  this way we will never paint the bg pattern

  need some hack for scroll/zoom ; test for mask == 255 would be slow :(

