- the old code for "a = 12" needs to go into tree.c ... the LEAF bit of
  pattern should make a defining occurence, not a reference

  ... actually, no, make a ref, then make the defining occurence in a later
  pass

- syntax allows

	12 = fred 99;

  but of course we will not ever eval this, except at the top level

  is this OK? we could disallow defs like this in a later pass

- do we put ws-locals in their own toolkit? can't remember

  we should if we don't, so that old defs are removed when you press 'process'

- currently have 

	def: 
		TK_IDENT sdef

  needs to be split to

	def:
		IDENT { start } pattern-list sdef { stop } |
		pattern { start } sdef { stop }

  but IDENT is a valid pattern :( maybe just have

	def:
		pattern { start } pattern-list sdef { stop } 

  and in { start } (or later?) have something to stop the pattern-list if 
  pattern isn't just an ident

  also, 

  	Image x

  id a valid pattern, need to ensure this is bracketed I guess

  atm sdef does params ... this should move out

  also,

	x <- expr

  needs to become

  	pattern <- expr

  do we allow

  	Image x <- expr

  or does this have to be bracketed?

  could allow

  	a:x = fred ... ;

  not ambigious, why not? also

  	fred a:x b:y = ...

  would not be ambigious

  really, it's just (Image x) that must be bracketed

- Filter / Blend items have extra blends in the name

- image blend should have an invert mask option?

- don't offer to clear temps if there's been a crash

  need to be able to test for process-still-running by PID

  does win even have pids?

- autoarrange after every column resize or move

  animate movement, so columns slither out of the way and in to place when 
  you drop

  duplicate column placement would be odd: maybe place duplicate below? also
  new column? what about dropping an image on to the ws background?

- have a toggle in find colour calib for "linearise"

  another option that uses the greyscale to set the zero, but does not adjust
  gamma?

  need to break linear regression out into a separate function ... se Math.def

  half-done colour calib thing

- apply calib should work for groups

- quit while a thumbnail is painting: IMAGEs are leaked? seems esp. bad with
  greyc, perhaps just because it's so slow

- there's some left-recursion in the parser, eg. comma_list, is this easily
  fixable?

- add (*) (operator sections) ... need a binup / uop production? can't
  do this without losing precedence stuff, it'll need a separate production
  for sections

- pattern matching

  	fred (a:x) = x
	fred [a, b, c] = 
	fred [a, b, ...] =
	fred [] =
	fred (a, b) = 
	fred [(a, b), (c, d), ...] = 
	fred [Image x, Matrix y] =
	fred 12 =
	fred (1, 2) =
	fred "hello world!" =

  do we need to have initial cap for constructors? not clear ... the pattern
  is just TK_IDENT TK_IDENT, for name-of-class, arg to bind

  should allow (IDENT . IDENT . IDENT) too? 

  also for LHS

  	[a, b] = ...

  also for LHS of generator in lcomps

  	[fred | [a, b] <- zip2 l1 l2]

  multiple definitions of the same function are allowed, provided they all
  have the same number of arguments, and provided only one of them has no
  argument pattern matching

  example:

  	fred [a, b] = a * b;
	fred (Image x) = rot90 x;
	fred z = error "what";

  any of these can have locals, those locals just apply to that one
  definition

  this compiles to:

  	$$fred1 $$a1 
		= a * b
	{
		a = $$a?0;
		b = $$a?1;
	}
	$$fred2 $$a2 
		= rot90 x
	{
		x = $$a2;
	}
	$$fred3 $$a3 
		= error "what";

	fred $$a4 
		= $$fred1 $$a4, is_list $$a4 && len $$a4 == 2
		= $$fred2 $$a4, is_instance_of "Image" $$a4
		= $$fred3 $$a4;

  so each pattern-matching definition generates a condition and an action

  the action goes into a private function, the conditions are joined together
  in the function wrapper

  the no-pattern case (if present) becomes the action for the "otherwise"
  clause in the wrapper

  if not present, we generate (error "pattern match failed") or somesuch for 
  the default case

  we will need to regenerate the wrapper function every time a definition of
  fred is added or removed ... can we do this easily?

  when are two definitions considered equal? should we warn about this? "fred
  x" could occur in two files, for example

  pattern type summary:

  	fred a = 

		TK_IDENT 

	fred 12 =
	fred "hello" =

		TK_CONST

  	fred (a:x) = 
  	fred [] = 

		TK_IDENT ':' pattern
		'[' ']'

	fred [a, b, c] = 
		
		'[' list_pattern ']'
		list_pattern: pattern | list_pattern ',' pattern
		/* could allow '..' as part of a pattern? */

	fred (a, b) = 

		'(' TK_IDENT ',' TK_IDENT ')'
		/* IDENT not pattern, since complex numbers can only be
		 * numbers */

	fred (Image x) =
		TK_IDENT TK_IDENT 
		'(' pattern ')'

  example:

  	[a, b] = fred 1 2;

  compiles to:

	$$v1 = fred 1 2
  	a	= $$v1?0, is_list $$v1 && len $$v1 == 2
		= error "pattern match failed";
  	b	= $$v1?1, is_list $$v1 && len $$v1 == 2
		= error "pattern match failed";

 




- which gtk are we using for the windows build? new gtks come from the main gtk
  site now, rather than tor's homepage:

	http://ftp.gnome.org/pub/GNOME/binaries/win32/

  should be all zips, so we could automate?

- magic definition maker could make a workspace-local def, rather cool

- do we leak for IMAGEVEC/DOUBLEVEC/etc. in vips_call.c? I think we might

- test classmodel_dict_new() ... part of classmodel member automation

  need to implement member edit for OPTION groups

	classmodel_done_member() ... read widget set -> model
	classmodel_buildedit_member( ... model -> build widget set 

  part of the [["key",value]] arg type

WONTFIX
=======

- toolkits / find doesn't find builtins on their name ... eg. search for
  "im_add"

  too hard to fix with the way searching is done now

- turn on update regions during drag, fix the x pos, try dragging, horrible
  flickering as we update twice, once after the drag motion and once after the
  recomp

  if you comment out the explicit vobject_refresh() in 
  regionview_model_update() the flickering goes, but region dragging is then
  very unresponsive

  fix this when we get fast recomp back again

- have a test_types.ws ... test arithmetic on all combinations of _types?

- panner would be cool

- tooltips on Expression rows always show unedited formula

  could special-case formula for things with expression RHS?

- what about iimage, iregion, iarrow ... can we member automate these? why are
  they different?

- can't see error indications in noedit mode

  should set a red background for display area as well as for rowview button?

- need to be able to override cons to be able to make a List class :-(

  see reduce.c:1710

  this will change the strictness of cons ... how much breakage will this
  cause? very unclear

  try this as a quick hack

  need to do this before we can finish List

  need List to make gamma easy

- unselected column headers are too like the bg colour on windows?

- python uses z.real and z.imag to extract real/image, should we add this too?

  we don't really have complex as a true class, so it would be rather odd

  need to add "[a].head" etc as well

- python blocks complex->real with casts ... insists you use .imag/.real or
  abs()

- if nip sees a IM_RW_IMAGE argument, it could automatically do this:

	int
	im_flood_blob_copy( IMAGE *in, IMAGE *out, int x, int y, PEL *ink )
	{
		IMAGE *t;

		if( !(t = im_open_local( out, "im_flood_blob_copy", "t" )) ||
			im_copy( in, t ) ||
			im_flood_blob( t, x, y, ink, NULL ) ||
			im_copy( t, out ) ) 
			return( -1 );

		return( 0 );
	}

  so it would turn a single IM_RW_IMAGE arg into a paired input and output
  arg

  could make im_lineset() into a regular inplace func and rely on nip to wrap
  and unwrap

  junk flood_blob_copy

  nip could do this lazilly ... if we see the user doing

     im_line (im_line ...) ...

  then we could make one memory image and call im_line twice on it
  destructively ... cool! we'd need to check refcounts to make sure the
  intermediate wasn't being used anywhere else

  hmm! might actually be very hard, we don't have true refcounts for things in
  the heap

  need to do it on read instead: 

    - for image i

    - use as an IM_RW_IMAGE arg ... copy to a memory area and pass in memory
      handle

    - return memory area IMAGE j, and set a flag saying "can operate on
      destructively"

    - if we use j as an IM_RW_IMAGE arg, skip the copy and just pass memory
      area in destructively ... we now have two ImageInfo sharing a single
      IMAGE

    - !!!!

    - does ImageInfo allow IMAGE sharing? not sure it does

    - maybe this needs to be a vips8 feature when we'll have refcounts on
      IMAGE

- tooltip on column says which other columns items in this column refer to,
  and which columns refer to items in this column

- how about a nip start folder common to all versions

  so nip2-7.11.14 tries

    .nip2-7.11.14/start
    .nip2-7.11/start
    .nip2-7/start
    .nip2/start

  or maybe

    .nip2/7.11.14/start
    .nip2/7.11/start
    .nip2/7/start
    .nip2/start

  bit less cluttered

  also, we could have

    .nip2/tmp

  and not have multiple nip2 tmp areas

  workspace recover after crash could break though ... maybe keep ws saves in
  .nip2/7.11.4/tmp?

- think again about class arg checks 

  is there some way we can avoid the _check overhead? or at least check less 
  often

- plotpresent/imagepresent could have a common base class with the focus stuff
  in? also kb nav, zoom, drag-scroll

  a bit difficult, because we want two different policies on window resize:
  plot should change the object to match the window

- photographic negative should also be in image/levels ?

  no, it does ->sRGB, (255-) etc., so it's better as a filter

- gtk+ 2.12 has a treeview widget with rectangular select and grid lines

  use instead of gtksheet?

- stop image flickering on clock recomp?

  want background pattern to be a property of the image display widget, not
  the image?

  so we fade in tiles when that section of the image has never been displayed
  before (eg. on scroll or zoom)

  we don't fade when that section has been painted and we are just changing
  the image (eg. on recalc)

  if fadesteps == 1, only paint the sections of the tile for which mask == 255

  this way we will never paint the bg pattern

  need some hack for scroll/zoom ; test for mask == 255 would be slow :(

